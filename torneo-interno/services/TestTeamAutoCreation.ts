import { TeamPlayer } from "../models/Team";

export interface AutoGeneratedTeam {
  players: TeamPlayer[];
  captain: TeamPlayer | null;
  positionCounts: Record<number, number>;
  totalLevel: number;
}

export const testAutoCreateTeams = (
  players: TeamPlayer[],
  playersPerTeam: number
): AutoGeneratedTeam[] => {
  const teams: AutoGeneratedTeam[] = [];
  const sortedPlayers = players.sort((a, b) => b.level.value - a.level.value); // Sort players by level, highest to lowest
  const numTeams = Math.ceil(sortedPlayers.length / playersPerTeam); // Calculate number of teams needed

  for (let i = 0; i < numTeams; i++) {
    teams.push({
      players: [],
      captain: null,
      positionCounts: {},
      totalLevel: 0,
    });
  }

  let currentTeam = 0;
  for (const player of sortedPlayers) {
    // Find team with lowest total level and add player to it
    let minTotalLevel = Number.MAX_SAFE_INTEGER;
    let minTotalLevelTeam = teams[0];
    for (const team of teams) {
      if (team.totalLevel < minTotalLevel) {
        minTotalLevel = team.totalLevel;
        minTotalLevelTeam = team;
      }
    }

    minTotalLevelTeam.players.push(player);
    minTotalLevelTeam.totalLevel += player.level.value;

    // Update position counts for current team
    if (player.position.value in minTotalLevelTeam.positionCounts) {
      minTotalLevelTeam.positionCounts[player.position.value]++;
    } else {
      minTotalLevelTeam.positionCounts[player.position.value] = 1;
    }

    // Check if current team needs a captain and assign captain if necessary
    if (!minTotalLevelTeam.captain && player.canBeCaptain) {
      minTotalLevelTeam.captain = player;
    }
  }

  return teams;
};
