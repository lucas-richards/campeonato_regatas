import React, { useState } from "react";
import { GetStaticProps } from "next";
import { Category } from "../../models/Player";
import { getCategories } from "../../services/db/CategoriaService";
import { Button, Grid, Typography } from "@mui/material";
import { normalize } from "../../services/db/PrismaClientServer";
import { TeamView, TeamCreationsView, TeamPlayer } from "../../models/Team";
import {
  autoCreateTeams,
  AutoGeneratedTeam,
} from "../../services/TeamAutoCreation";
import { toTeamView } from "../../transformers/Team";

interface TeamCreationProps {
  categories: Category[];
}

const ArmadoEquipos = (props: TeamCreationProps) => {
  const [players, setPlayers]: [TeamPlayer[], any] = useState([]);

  const onClickHandler = async (event: React.MouseEvent<HTMLButtonElement>) => {
    const response = await fetch("/api/admin/teams/A");
    const teams: TeamCreationsView = await response.json();

    setPlayers(teams.noTeam);
    // const autogenerated: AutoGeneratedTeam[] = autoCreateTeams(
    //   teams.noTeam,
    //   10
    // );

    // const fullTeams: TeamView[] = autogenerated.map((el) => {
    //   return toTeamView(el);
    // });
  };

  return (
    <>
      <Grid container rowGap={2} mt={2}>
        <Grid item xs={12}>
          <Typography>Armado Equipos</Typography>
        </Grid>
        <Grid item xs={12}>
          <Grid container>
            {props.categories.map((el) => (
              <Grid item key={el.description} lg={1} md={2} sm={4}>
                <Button
                  variant="outlined"
                  value={el.description}
                  onClick={onClickHandler}
                >
                  {el.description}
                </Button>
              </Grid>
            ))}
          </Grid>
        </Grid>
        <Grid item xs={12}>
          <Grid container>
            <Grid item xs={3}>
              {players.map((el) => (
                <Grid container key={el.dni}>
                  <Grid item xs={8}>
                    <Typography>{`${el.name} ${el.lastName}`}</Typography>
                  </Grid>
                  <Grid item xs={2}>
                    <Typography noWrap>{el.position.description}</Typography>
                  </Grid>
                  <Grid item xs={2}>
                    <Typography noWrap>{el.level.description}</Typography>
                  </Grid>
                </Grid>
              ))}
            </Grid>
          </Grid>
        </Grid>
      </Grid>
    </>
  );
};

// You should use getStaticProps when:
//- The data required to render the page is available at build time ahead of a user’s request.
//- The data comes from a headless CMS.
//- The data can be publicly cached (not user-specific).
//- The page must be pre-rendered (for SEO) and be very fast — getStaticProps generates HTML and JSON files, both of which can be cached by a CDN for performance.

export const getStaticProps: GetStaticProps = async (ctx) => {
  const categories: Category[] = await getCategories("");

  return {
    props: {
      categories: normalize(categories),
    },
  };
};

export default ArmadoEquipos;
