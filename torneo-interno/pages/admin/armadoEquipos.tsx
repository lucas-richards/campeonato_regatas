import React, { useState } from "react";
import { GetServerSideProps, GetStaticProps } from "next";
import { Category } from "../../models/Player";
import { getCategories } from "../../services/db/CategoriaService";
import { Grid, Typography } from "@mui/material";
import { normalize } from "../../services/db/PrismaClientServer";
import { TeamView, TeamCreationsView, TeamPlayer } from "../../models/Team";
import {
  autoCreateTeams,
  AutoGeneratedTeam,
} from "../../services/TeamAutoCreation";
import { toTeamView } from "../../transformers/Team";
import TeamCreationButtons from "../../components/admin/TeamCreation/TeamCreationButtons";
import TeamBuildingLayout from "../../components/admin/TeamCreation/TeamBuildingLayout";
import { resetServerContext } from "react-beautiful-dnd";

interface TeamCreationProps {
  categories: Category[];
}

const ArmadoEquipos = (props: TeamCreationProps) => {
  const [players, setPlayers]: [TeamPlayer[], any] = useState([]);
  const [teamViews, setTeamViews]: [TeamView[], any] = useState([]);

  const onClickHandler = async (event: React.MouseEvent<HTMLButtonElement>) => {
    const response = await fetch("/api/admin/teams/A");
    const teams: TeamCreationsView = await response.json();

    setPlayers(teams.noTeam);
    const autogenerated: AutoGeneratedTeam[] = autoCreateTeams(
      teams.noTeam,
      10
    );

    const fullTeams: TeamView[] = autogenerated.map((el) => {
      return toTeamView(el);
    });
    setTeamViews(fullTeams);
    setPlayers([]);
  };

  const playerSortedHandler = (
    teams: TeamView[],
    noTeamPlayers: TeamPlayer[]
  ) => {
    setTeamViews(teams);
    setPlayers(noTeamPlayers);
  };

  return (
    <>
      <Grid container rowGap={2} mt={2}>
        <Grid item xs={12}>
          <Typography>Armado Equipos</Typography>
        </Grid>
        <Grid item xs={12}>
          <TeamCreationButtons
            clickHandler={onClickHandler}
            categories={props.categories}
          ></TeamCreationButtons>
        </Grid>
        <Grid item xs={12}>
          <TeamBuildingLayout
            noTeamPlayers={players}
            teams={teamViews}
            onPlayerRearranged={playerSortedHandler}
          ></TeamBuildingLayout>
        </Grid>
      </Grid>
    </>
  );
};
export const getStaticProps: GetStaticProps = async () => {
  const categories: Category[] = await getCategories("");
  resetServerContext();

  return {
    props: {
      categories: normalize(categories),
    },
  };
};

export default ArmadoEquipos;
